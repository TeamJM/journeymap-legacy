buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
//        classpath group: 'com.modrinth.minotaur', name: 'Minotaur', version: '2.+' //TODO
    }
}

apply plugin: 'forge'
apply plugin: 'java'
apply plugin: 'com.matthewprenger.cursegradle'
//apply plugin: "com.modrinth.minotaur" //TODO

ext {
    configFile = file "project.properties"
    srcWebDir = "src/main/resources/assets/journeymap/web/"
    implSrc = "build/resources/java/journeymap/feature/impl/"
}

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.minecraft_version}-${config.jm_major}.${config.jm_minor}.${config.jm_micro}${config.jm_patch}"
group = "${config.group_id}"
archivesBaseName = "${config.mod_id}".toLowerCase()
targetCompatibility = sourceCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = "${config.minecraft_version}-${config.forge_version}-${config.minecraft_version}"
    runDir = "run"

    replace "@JMVERSION@", "${config.jm_major}.${config.jm_minor}.${config.jm_micro}${config.jm_patch}"
    replace "@MCVERSION@", config.minecraft_version
    replace "@FORGEVERSION@", config.forge_version
    replace "@MAJOR@", config.jm_major
    replace "@MINOR@", config.jm_minor
    replace "@MICRO@", config.jm_micro
    replace "@PATCH@", config.jm_patch
    mappings = "snapshot_${config.snapshot}"
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.*')
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'license.txt'
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'date': getDate()
    }
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'license.txt'
    }

    //adds the AT file(s)
    rename '(.+_at.cfg)', 'META-INF/$1'
}

task processDocs(type: Copy) {
    // update docs
    from(file("/doc/")) {
        include '*.html'
        expand 'version': project.version,
                'date': getDate(),
                'mcversion': config.minecraft_version,
                'forgeversion': config.forge_version
    }
    into 'build/doc'
}

task copyJs(type: Copy) {
    from 'tmp'
    into 'build/resources/main/assets/journeymap/web/css'
    include 'journeymap.css'
}

task copyCss(type: Copy, dependsOn: copyJs) {
    from 'tmp'
    into 'build/resources/main/assets/journeymap/web/js'
    include 'journeymap.js'
}

task filter() {
    def subdir = new File("tmp")

    if (!subdir.exists()) {
        subdir.mkdirs()
    }
}

task minifyJs(type: JavaExec, dependsOn: filter) {
    ant.java(jar: "libs/yuicompressor-2.4.7.jar", fork: true)
            {
                arg(value: "${srcWebDir}js/journeymap.js")
                arg(value: "-o")
                arg(value: "tmp/journeymap.js")
            }
}

task minifyCss(type: JavaExec, dependsOn: filter) {
    ant.java(jar: "libs/yuicompressor-2.4.7.jar", fork: true)
            {
                arg(value: "${srcWebDir}css/journeymap.css")
                arg(value: "-o")
                arg(value: "tmp/journeymap.css")
            }
}

task deleteNoRadar(type: Delete) {
    delete '${implSrc}NoRadar.java'
}

task deleteUnlimited(type: Delete) {
    delete '${implSrc}Unlimited.java'
}

task unlimitedJar(type: Jar, dependsOn: ['copyCss', 'deleteNoRadar', 'processDocs']) {
    version = "${version}-${config.unlimited}".toLowerCase()

    from(sourceSets.main.output) {
        exclude("journeymap/client/feature/impl/NoRadar.class")
    }
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'forgeversion': config.forge_version, jmedition: config.unlimited
    }
    manifest {
        attributes 'FMLAT': 'journeymap_at.cfg'
    }
}

task fairPlayJar(type: Jar, dependsOn: ['copyCss', 'deleteNoRadar', 'deleteUnlimited', 'processDocs']) {
    version = "${version}-${config.fairPlay}".toLowerCase()
    from(sourceSets.main.output) {
        exclude("journeymap/client/feature/impl/Unlimited.class")
        exclude("journeymap/client/feature/impl/NoRadar.class")
    }
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'forgeversion': config.forge_version, jmedition: config.fairPlay
    }
    manifest {
        attributes 'FMLAT': 'journeymap_at.cfg'
    }
}

reobf {
    reobf(unlimitedJar) { spec ->
        spec.classpath = sourceSets.main.compileClasspath;
    }
    reobf(fairPlayJar) { spec ->
        spec.classpath = sourceSets.main.compileClasspath;
    }
}

task makePretty(type: Delete) {
    delete "build/libs/${archivesBaseName}-${version}.jar"
    delete '/tmp/'
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format(config.dateFormat)
    return formattedDate
}

build.dependsOn makePretty

// Automated upload to CurseForge for the win!
if (!project.hasProperty("curseForgeApiKey")) {
    ext.curseForgeApiKey = "notset"
}


curseforge {
    project {
        id = '32274'
        apiKey = "${curseForgeApiKey}"
        changelogType = 'html'
        releaseType = config.curse_release_type
        relations {
            tool 'journeymap-tools'
        }

        mainArtifact(unlimitedJar) {
            displayName = "${archivesBaseName}-${version}"
            changelog = file('/build/doc/changelog.html')
        }

        addArtifact(fairPlayJar) {
            changelog = file('/build/doc/changelog.html')
        }
    }
}


//TODO: see if we can get modrinth working
//tasks.modrinth.dependsOn(tasks.build)
//
//modrinth {
//    token = "${modrinthApiKey}"
//    projectId = "lfHFW1mp"
//    versionNumber = "${version}"
//    versionName = "${archivesBaseName}-${version}"
//    versionType = "release"
//    uploadFile = shadowJar
//    gameVersions = ["${project.minecraft_version}"]
//    loaders = ["forge"]
//    changelog = file('/build/doc/changelog.html').exists() ? file('/build/doc/changelog.html').text : null
//}
